function [data,cfg]=m_do_slidingwindow(data,cfg)


cwregression=cfg.cwregression;

% as input we have the data matrix, and the regressor matrix.
% we have sampling rate
% we have the length of the window in sec
% we have the amount of temporal delay in sec

% function_to_calculate_nwindows=@(x) 2*(2^x-1)+1;
% nwindows=function_to_calculate_nwindows(cwregression.taperingfactor);
% do some complicated arithmatics to make sure that the boundaries of the
% tapering windows always falls on a sample (and not between samples, as
% then the sum would no longer hold...
% iteratively add (length) in samples to obtain this result.
% taper_factor = cwregression.taperingfactor;

number_of_samples_in_window = floor(cwregression.srate*cwregression.windowduration + 1);
step_in_samples = number_of_samples_in_window - 1;


delay_in_samples = floor(cwregression.srate*cwregression.delay);
window=[];

x=data.matrix(cwregression.channelinds,:);
regs=data.matrix(cfg.cwregression.regressorinds,:);

% for now... just store the subtracted data, so I can view it...
subtracted_signals = zeros(size(x),class(x));

% stores logging (fitparameters, etc).
store_logging={};


% if you later decide to skip certain bad fits/windows, the division needs
% to be accounted for separately. Since this is a bit more complicated, we
% now divide (see later on) by 2^(taper_factor-1) and leave it at that.
% for this purpose, matrix_weights_fits would exist (see commented code).

keyboard;
jcheck=1;
current_sample = 1;
try
while current_sample < size(x,2) - number_of_samples_in_window;
    
    % what does this select??
    range = current_sample:(current_sample+number_of_samples_in_window-1);
 
    % do a new window;
    xpart = x(:,range);
    regspart = regs(:,range);
    
    [fittedregs logging]=tools.fit_regmat_to_signalmat(xpart,regspart,[],delay_in_samples);
    
    subtracted_signals(:,range) = fittedregs(range);
        
    
    % do a new window;
    xpart = x(:,range);
    regspart = regs(:,range);
    [fittedregs logging]=tools.fit_regmat_to_signalmat(xpart,regspart,window,delay_in_samples);
    % do fifo rule! (% shift the windows backwards)
    % shift it (carefully, without (hopefully) overwriting stuff.
    for im=(size(matrix_stored_fits,3)):-1:2;
        matrix_stored_fits(:,:,im)=matrix_stored_fits(:,:,im-1);
        % for putting in the weights... and for me to check!!
        matrix_stored_weights(:,im)=matrix_stored_weights(:,im-1);
    end
    % keyboard;
    matrix_stored_fits(:,:,1) = fittedregs;
    % put hann windows in there...
    matrix_stored_weights(:,1) = window;
    % matrix_weights_fits(:,1:end-1) = matrix_weights_fits(:,2:end);
    % matrix_weights_fits = window;
    
    % store fitting parameters
    store_logging{end+1} = logging;
    
    
    % annotate begin/end
    % annotate all that fitted data...
    
    % I can check which part is complete...
    
    % increment our little while loop counter.
    current_sample = current_sample+step_in_samples;
    
end
catch
    keyboard;
end


cfg.cwregression.logging = store_logging;
data.subtracted_data = subtracted_signals;